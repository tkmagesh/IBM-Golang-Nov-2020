Go Lang?
    High Level Programming Language

2007
2009 - Released 
By
    Robert Griesemen
    Rob Pike
    Ken Thomson

C
C++
Phython, Ruby
1998 - Java
1999 - .NET (C# & VB.NET)
2008 - Node.js

Closer to the Hardware (Like C)
    C - Not developer friendly

concurrency friendly
    Multi-threaded
        thread synchronization
        dead-lock possibility
        race conditions
        resource intensive

    Single-threaded
        Event Loop (scheduler)
        not very resource intensive
        logic implementation will become complex (unmaintainable)

    Go uses 'goroutines'
        just functions, but executed by a thread like infrastructure
        1000s of goroutines executed in ONE SINGLE thread
        language features to support goroutines
            ex: go, select, chan etc

Simplicity
    - 25 keywords
    break, case, chan, const, continue,
    default, defer, else, fallthrough, for,
    func, go, goto, if, import,
    interface, map, package, range, return,
    select, struct, switch, type, var

Missing in go
    No function or operator overloading
    No implicit conversions
    No classes, type inheritance
    No generics
    No exceptions
    No assertions
    No immutable variables

Functional Programming


Event Driven Applications




employee.dat
id,name,doj,salary,dob,address

Problem
    Write an application to calculate the average salary of all the employees

declare count, sum
open file
while (!eof){
    read line from file
    parse the line
    extract salary
    sum += salary
    ++count
    read next line
}
declare avg = sum / count
print avg
close file

go tools & runtime
editor

go program structure
    package name
    dependent package import statements
    variables and constant declarations
    init() function
    main() function
    rest of the functions

Types
    Primitive Types
        int, float, string, boolean
        integers
            int8, int16, int32, int64, uint8, uint16, uint32, uint64
        float
            float32, float64
    Structured or Composite Types
        struct, array, slice, map, channel & interface

Array
    numbered sequence of elements with fixed size of the same type

    var x [5]int

Slice
    Wrapper around an array
    s[lo:hi] - elements between lo and hi-1
    s[lo:lo] - empty
    s[lo:lo+1] - one element

Map
    collection of key/value pairs